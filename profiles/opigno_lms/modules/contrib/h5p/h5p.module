<?php

/**
 * @file
 *  h5p.module php file
 *  Drupal module h5p. A HTML5 Package manager for Drupal.
 */

// Views support is included in views/quiz.views.inc
define('H5P_VIEWS_DIR', drupal_get_path('module', 'h5p') . '/views');

/**
 * Implements hook_init()
 */
function h5p_init() {
  if (path_is_admin(current_path()) && empty($_POST) && user_access('access administration pages')) {
    $core = _h5p_get_instance('core');
    $core->validateLibrarySupport();
    _h5p_display_unsupported_libraries(arg(2) === 'h5p');
  }
}

/**
 * Implements hook_menu().
 */
function h5p_menu() {
  $items = array();
  $items['admin/config/system/h5p'] = array(
    'title' => 'H5P',
    'description' => 'Configure the location of h5p files.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('h5p_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'h5p.admin.inc',
  );

  $items['admin/content/h5p'] = array(
    'title' => 'H5P Libraries',
    'description' => 'List, delete and get detailed info on the installed H5P libraries',
    'page callback' => 'h5p_library_list',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'h5p.admin.inc',
  );
  $items['admin/content/h5p/libraries/%'] = array(
    'title' => 'H5P Library Details',
    'title callback' => '_h5p_library_details_title',
    'title arguments' => array(4),
    'description' => 'Get detailedÂ info on a library',
    'page callback' => 'h5p_library_details',
    'page arguments' => array(4),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'h5p.admin.inc',
  );
  $items['admin/content/h5p/libraries/%/upgrade'] = array(
    'title' => 'Upgrade H5P Content',
    'page callback' => 'h5p_content_upgrade',
    'page arguments' => array(4),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'h5p.admin.inc',
  );
  $items['admin/content/h5p/libraries/%/delete'] = array(
    'title' => 'Delete H5P Library',
    'description' => 'Delete an unused H5P library',
    'page callback' => 'h5p_library_delete',
    'page arguments' => array(4),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'h5p.admin.inc',
  );
  $items['admin/content/h5p/libraries/%/restrict'] = array(
    'title' => 'H5P Library Restrict',
    'page callback' => 'h5p_restrict_library_callback',
    'page arguments' => array(4),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'h5p.admin.inc',
  );
  $items['admin/content/h5p/upgrade/library/%/%/%'] = array(
    'title' => 'H5P Content Upgrade Library',
    'page callback' => 'h5p_content_upgrade_library',
    'page arguments' => array(5, 6, 7),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'h5p.admin.inc',
  );
  $items['admin/content/h5p/libraries/upgrade-all'] = array(
    'title' => 'Upgrade All H5P Libraries',
    'page callback' => 'h5p_upgrade_all_libraries',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'h5p.admin.inc',
  );
  $items['admin/content/h5p/rebuild-cache'] = array(
    'title' => 'H5P Rebuild Content Cache',
    'page callback' => 'h5p_rebuild_cache',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
    'file' => 'h5p.admin.inc',
  );

  $items['h5p/embed/%node'] = array(
    'title' => 'H5P Embed Data',
    'page callback' => 'h5p_embed',
    'page arguments' => array(2),
    'access callback' => 'node_access',
    'access arguments' => array('view', 2),
    'type' => MENU_CALLBACK,
  );

  // TODO: Should we stick to url conventions? http://moz.com/blog/11-best-practices-for-urls
  // If we want to hint on return type we should call this //h5p/set-finished.json
  $items['h5p-ajax/setFinished'] = array(
    'page callback' => 'h5p_set_finished',
    'access callback' => 'h5p_access_set_finished',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_cron().
 */
function h5p_cron() {
  h5p_fetch_libraries_metadata();
}

function h5p_fetch_libraries_metadata($fetchingDisabled = FALSE) {
  // If fetching of libraries from h5p.org is enabled and
  // It has not been run the last 24 hours, let's do it
  // Intentionally not doing === TRUE on h5p_allow_communication_with_h5p_org test
  if ($fetchingDisabled || (variable_get('h5p_allow_communication_with_h5p_org', TRUE) &&
     (intval(variable_get('h5p_fetched_library_metadata_on', 0)) < (time() - 86400)))) {
    // Fetch the library-metadata:
    $core = _h5p_get_instance('core');
    $core->fetchLibrariesMetadata($fetchingDisabled);
    variable_set('h5p_fetched_library_metadata_on', time());
  }
}

/**
 * Make URLs absolute.
 *
 * @param array $urls
 * @param array $remove Optional urls to skip.
 * @return array absolute urls.
 */
function _h5p_make_urls_absolute($urls, $remove = NULL) {
  global $base_url;
  for ($i = 0, $s = count($urls); $i < $s; $i++) {
    if ($remove !== NULL && preg_match($remove, $urls[$i])) {
      array_splice($urls, $i, 1);
      $i--;
      $s--;
      continue;
    }

    // Skip URLs who already have a base, like aggregated assets.
    if (substr($urls[$i], 0, strlen($base_url)) !== $base_url) {
      $urls[$i] =  $base_url . '/' . $urls[$i];
    }
  }
  return $urls;
}

/**
 * Get path to HTML5 Package.
 *
 * @param int $content_id
 * @return string
 */
function h5p_get_export_path($content_id) {
  return variable_get('h5p_export', 1) ? file_create_url(_h5p_get_h5p_path() . '/exports/' . $content_id . '.h5p') : '';
}

/**
 * Embed data.
 *
 * Caching this in DB probably won't have much to say? Since the
 * node needs to be loaded first. Varnish or other page cache
 * will work much better.
 *
 * Embed code example:
 * <script src="//127.0.0.1/sites/all/modules/h5p/library/js/h5p-embed.js" data-h5p="//127.0.0.1/h5p/embed/1" async></script>
 */
function h5p_embed($node) {
  global $base_url;
  $callback = filter_input(INPUT_GET, 'callback');

  if ($callback === NULL) {
    drupal_not_found();
    module_invoke_all('exit');
    exit();
  }

  $content = array(
    'id' => h5p_get_content_id($node),
    'title' => $node->title,
    'params' => $node->json_content,
    'language' => $node->language,
    'library' => $node->main_library,
    'embedType' => 'div',
  );
  $core = _h5p_get_instance('core');
  // Important! Params must be filtered before content dependencies are loaded.
  $params = $core->filterParameters($content);

  $preloaded_dependencies = $core->loadContentDependencies($content['id'], 'preloaded');
  $files = $core->getDependenciesFiles($preloaded_dependencies);

  $assets = array();
  h5p_add_iframe_assets($assets, $content['id'], $files);

  $settings = array(
    'id' => intval($content['id']),
    'path' => $base_url . '/' . _h5p_get_h5p_path() . '/',
    'library' => $node->main_library['name'] . ' ' . $node->main_library['majorVersion'] . '.' . $node->main_library['minorVersion'],
    'fullscreen' => intval($node->main_library['fullscreen']),
    'exportUrl' => h5p_get_export_path($content['id']),
    'embedCode' => _h5p_generate_embed_code($node->nid),
    'styles' => _h5p_make_urls_absolute(array_merge($assets['h5p']['core']['styles'], $assets['h5p']['cid-' . $content['id']]['styles'])),
    'scripts' => _h5p_make_urls_absolute(array_merge($assets['h5p']['core']['scripts'], $assets['h5p']['cid-' . $content['id']]['scripts']), '/\/h5pintegration\.js/'),
    'params' => $params,
    'i18n' => array(
      'H5P' => array(
        'fullscreen' => t('Fullscreen'),
        'disableFullscreen' => t('Disable fullscreen'),
        'download' => t('Download H5P'),
        'copyrights' => t('Rights of use'),
        'embed' => t('Embed'),
        'copyrightInformation' => t('Rights of use'),
        'close' => t('Close'),
        'title' => t('Title'),
        'author' => t('Author'),
        'year' => t('Year'),
        'source' => t('Source'),
        'license' => t('License'),
        'thumbnail' => t('Thumbnail'),
        'noCopyrights' => t('No copyright information available for this content.'),
        'downloadDescription' => t('Download this content as a H5P file.'),
        'copyrightsDescription' => t('View copyright information for this content.'),
        'embedDescription' => t('View the embed code for this content.'),
        'h5pDescription' => t('Visit H5P.org to check out more cool content.'),
      ),
    ),
  );

  print $callback . '(' . json_encode($settings) . ');';
}

/**
 * Generate embed code for a given node
 *
 * @param integer $nid
 * @return string
 */
function _h5p_generate_embed_code($nid) {
  global $base_url;
  $module_path = drupal_get_path('module', 'h5p');
  $embed_js_url = $base_url . '/' . $module_path . '/library/js/h5p-embed.js';
  $data_url = url('h5p/embed/' . $nid, array('absolute' => TRUE));

  return '<script src="' . $embed_js_url .'" data-h5p="' . $data_url . '" async></script>';
}

/**
 * Creates the title for the library details page
 *
 * @param integer $library_id
 */
function _h5p_library_details_title($library_id) {
  return db_query('SELECT title FROM {h5p_libraries} where library_id = :id', array(':id' => $library_id))->fetchField();
}

/**
 * Implements hook_node_info().
 */
function h5p_node_info() {
  return array(
    'h5p_content' => array(
      'name' => t('Interactive content'),
      'base' => 'h5p',
      'description' => 'Upload HTML5 packages(.h5p) to create interactive content.',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function h5p_permission() {
  return array(
    'update h5p libraries' => array(
      'title' => t('Update libraries'),
      'description' => t('The user is allowed to update H5P libraries. Only give this permission to trusted users who knows what they are doing.'),
    ),
    'access all h5p results' => array(
      'title' => t('Access all H5P results'),
      'description' => t('Access all H5P results stored in the system'),
    ),
    'access own h5p results' => array(
      'title' => t('Access own H5P results'),
      'description' => t('Access own H5P results from user profile.'),
    ),
    'access h5p results for own content' => array(
      'title' => t('Access h5p results for own content'),
      'description' => t('The user is allowed to see all results for content he has created. Available as a tab on each node.'),
    ),
    'create restricted h5p content types' => array(
      'title' => t('Create restricted H5P content types'),
      'description' => t('The user is allowed to create H5P content types that has been restricted in the library administration interface.'),
    ),
  );
}

/**
 * Implements hook_form().
 */
function h5p_form(&$node, $form_state) {
  _h5p_check_settings();

  _h5p_maintain_session_variables();

  $type = node_type_get_type($node);

  $form['#validate'][] = 'h5p_form_validate';

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => check_plain($type->title_label),
    '#required' => TRUE,
    '#default_value' => $node->title,
  );

  $form['#attributes'] = array('enctype' => "multipart/form-data");

  $form['h5p'] = array(
    '#type' => 'file',
    '#title' => t('HTML 5 Package'),
    '#description' => t('Select a .h5p file to upload and create interactive content from. You may start with the <a href="http://h5p.org/content-types-and-applications" target="_blank">example files</a> on H5P.org'),
    '#weight' => 2,
  );

  if (isset($node->json_content) || isset($node->translation_source) && isset($node->translation_source->json_content)) {
    $source = isset($node->translation_source) ? $node->translation_source : $node;
    $content = array(
      'id' => h5p_get_content_id($node),
      'title' => $source->title,
      'params' => $source->json_content,
      'language' => $source->language,
      'library' => $source->main_library,
      'embedType' => 'div',
    );
    $core = _h5p_get_instance('core');
    $filtered_params = $core->filterParameters($content);
  }
  else {
    $filtered_params = '{}';
  }

  $form['json_content'] = array(
    '#type' => 'hidden',
    '#default_value' => $filtered_params,
  );

  $form['main_library_id'] = array(
    '#type' => 'value',
    '#default_value' => isset($node->main_library_id) ? $node->main_library_id : '',
  );

  $form['embed_type'] = array(
    '#type' => 'value',
    '#default_value' => isset($node->embed_type) ? $node->embed_type : 'div',
  );

  return $form;
}

/**
 * Validate the h5p file
 */
function h5p_form_validate($form, &$form_state) {
  // Avoid blocking node deletion with missing files.
  if ($form_state['values']['op'] == t('Delete')) {
    return;
  }

  $validators = array(
    'file_validate_extensions' => array('h5p'),
  );
  // New uploads need to be saved in temp in order to be viewable
  // during node preview.
  $temporary_file_path = 'public://' . variable_get('h5p_default_path', 'h5p') . '/temp/' . uniqid('h5p-');
  file_prepare_directory($temporary_file_path, FILE_CREATE_DIRECTORY);

  if ($file = file_save_upload('h5p', $validators, $temporary_file_path)) {
    // We're good to go.
    $form_state['values']['new_h5p'] = TRUE;
    $_SESSION['h5p_upload'] = $form_state['values']['h5p'] = drupal_realpath($file->uri);
    $_SESSION['h5p_upload_folder'] = drupal_realpath($temporary_file_path);
  }
  elseif (!isset($form['#node']->nid) && empty($form_state['values']['h5p']) && empty($_SESSION['h5p_upload'])) {
    form_set_error('h5p', t('You must upload a h5p file.'));
  }
}

/**
 * Implements hook_validate().
 */
function h5p_validate($node, &$form) {
  if (isset($_SESSION['h5p_upload'])) {
    $h5p_validator = _h5p_get_instance('validator');
    $valid = $h5p_validator->isValidPackage();
    if (!$valid) {
      form_set_error('h5p', t('The uploaded file was not a valid H5P package'));
      // Nothing is valid, nothing is kept.
      unset($_SESSION['h5p_upload'], $_SESSION['h5p_upload_folder']);
    }
  }
}

/**
 * Implements hook_insert().
 */
function h5p_insert($node) {
  if (isset($_SESSION['h5p_upload'])) {
    $h5p_core = _h5p_get_instance('storage');
    $h5p_core->savePackage(h5p_get_content_id($node), $node->nid);
  }
  else {
    $core = _h5p_get_instance('core');
    $core->saveContent(array(
      'id' => h5p_get_content_id($node),
      'params' => $node->json_content,
      'embed_type' => $node->embed_type,
      'library' => array(
        'libraryId' => $node->main_library_id
      )
    ), $node->nid);
  }
}

/**
 * Implements hook_update().
 */
function h5p_update($node) {
  if ($node->revision && variable_get('h5p_revisioning', 1)) {
    // Create new revision
    $h5p_storage = _h5p_get_instance('storage');
    if (isset($_SESSION['h5p_upload'])) {
      // Use newly uploaded package
      $h5p_storage->savePackage($node->vid, $node->nid);
    }
    else {
      // Copy old package
      $h5p_storage->copyPackage($node->vid, $node->old_vid, $node->nid);
      // Insert content:
      h5p_insert($node);
    }
  }
  else {
    if (isset($_SESSION['h5p_upload'])) {
      // Replace old package
      $h5p_storage = _h5p_get_instance('storage');
      $h5p_storage->updatePackage(h5p_get_content_id($node), $node->nid);
    }
    else {
      h5p_insert($node);
    }
  }
}

/**
 * Implements hook_delete().
 */
function h5p_delete($node) {
  $h5p_core = _h5p_get_instance('storage');
  $h5p_export = _h5p_get_instance('export');

  $res = db_query("SELECT content_id FROM {h5p_nodes} WHERE nid = :nid", array(':nid' => $node->nid));
  while ($content_id = $res->fetchField()) {
    $h5p_core->deletePackage($content_id);
    $h5p_export->deleteExport($content_id);
  }
  db_delete('h5p_points')
    ->condition('content_id', h5p_get_content_id($node))
    ->execute();
}

/**
 * Implements hook_load().
 */
function h5p_load($nodes) {
  $h5p = _h5p_get_instance('core');
  foreach ($nodes as $nid => &$node) {
    $content = $h5p->loadContent(h5p_get_content_id($node));

    if ($content !== NULL) {
      $node->json_content = $content['params'];
      $node->main_library_id = $content['library']['id'];
      $node->embed_type = $content['embedType'];
      $node->main_library = $content['library'];
      $node->filtered = $content['filtered'];
    }
  }
}

/**
 * Implements hook_view().
 */
function h5p_view($node, $view_mode = 'full') {
  node_object_prepare($node);

  if (!isset($node->in_preview) && isset($node->main_library_id)) {
    $content_id = h5p_get_content_id($node);
    $embed = H5PCore::determineEmbedType($node->embed_type, $node->main_library['embedTypes']);

    h5p_add_files_and_settings($node, $embed);
    // TODO: Should we use Drupal's theme system?
    if ($embed === 'div') {
      $html = '<div class="h5p-content" data-content-id="' .  $content_id . '"></div>';
    }
    else {
      $html = '<div class="h5p-iframe-wrapper"><iframe id="h5p-iframe-' . $content_id . '" class="h5p-iframe" data-content-id="' . $content_id . '" style="height:1px" src="about:blank" frameBorder="0" scrolling="no"></iframe></div>';
    }
  }

  if (!isset($html)) {
    $html = '<div>' . t('Sorry, preview of H5P content is not yet available.') . '</div>';
  }
  else {
    h5p_set_started(h5p_get_content_id($node));
  }

  // Check if any unsupported libraries. Only users which may update this node will get the warning message
  if (node_access('update', $node)) {
    _h5p_display_unsupported_libraries();
  }

  $node->content['h5p'] = array(
    '#markup' => $html,
    '#weight' => 1,
  );

  return $node;
}

/**
 * If unsupported libraries, display a message
 */
function _h5p_display_unsupported_libraries($display_details = FALSE) {
  // Check if any unsupported libraries. Only users which may update this node will get the warning message
  $unsupported_libraries = variable_get('h5p_unsupported_libraries');
  if ($unsupported_libraries !== NULL) {
    if ($display_details) {
      $core = _h5p_get_instance('core');
      $message = $core->createMarkupForUnsupportedLibraryList($unsupported_libraries);
    }
    else {
      $message = t('You have %num_libs H5P libraries with versions not supported anymore. ', array('%num_libs' => sizeof($unsupported_libraries)));
    }

    $message .= t('Please upgrade all H5P libraries <a href="@url">here</a>', array('@url' => url('admin/content/h5p/libraries/upgrade-all')));

    drupal_set_message($message, 'warning', FALSE);
  }
}

/**
 * Implements hook_user_delete
 */
function h5p_user_delete($account) {
  db_delete('h5p_points')
    ->condition('uid', $account->uid)
    ->execute();
}

/**
 * Access callback for the setFinished feature
 */
function h5p_access_set_finished() {
  if (!isset($_POST['contentId'])) {
    return FALSE;
  }
  $nid = $_POST['contentId'];
  if (variable_get('h5p_revisioning', 1)) {
    $nid = db_query('SELECT nid FROM {node_revision} WHERE vid = :vid', array(':vid' => $nid))->fetchField();
  }
  return node_access('view', node_load((int) $nid));
}

/**
 * Set that the logged in user has started on an h5p
 *
 * @param int $content_id
 *  The id for the H5P content (vid or nid depending on setting)
 */
function h5p_set_started($content_id) {
  global $user;

  if ($user->uid) {
    db_merge('h5p_points')
      ->key(array(
        'content_id' => $content_id,
        'uid' => $user->uid,
      ))
      ->insertFields(array(
        'content_id' => $content_id,
        'uid' => $user->uid,
        'started' => time(),
      ))
      ->execute();
  }
}

/**
 * Callback function for storing the users results in the database
 */
function h5p_set_finished() {
  global $user;
  $result = array('success' => FALSE);

  if ($user->uid && $_POST['contentId'] !== NULL && $_POST['score'] !== NULL && $_POST['maxScore'] !== NULL) {
    db_update('h5p_points')
      ->fields(array(
        'finished' => time(),
        'points' => $_POST['score'],
        'max_points' => $_POST['maxScore'],
      ))
      ->condition('content_id', $_POST['contentId'])
      ->condition('uid', $user->uid)
      ->execute();
    $result['success'] = TRUE;
  }

  echo json_encode($result);
}

/**
 * Adds content independent scripts, styles and settings
 *
 * @returns array Assets.
 */
function h5p_add_core_assets() {
  static $assets;
  global $user;

  if ($assets === NULL) {
    $cache_buster = '?' . variable_get('css_js_query_string', '');
    $module_path = drupal_get_path('module', 'h5p');
    $assets = array(
      'css' => array(),
      'js' => array()
    );

    foreach (H5PCore::$styles as $style) {
      $css = $module_path . '/library/' . $style;
      drupal_add_css($css);
      $assets['css'][] = $css . $cache_buster;
    }

    $js = $module_path . '/js/h5pintegration.js';
    drupal_add_js($js);
    $assets['js'][] = $js . $cache_buster;

    foreach (H5PCore::$scripts as $script) {
      $js = $module_path . '/library/' . $script;
      drupal_add_js($js);
      $assets['js'][] = $js . $cache_buster;
    }

    drupal_add_js(array(
      'h5p' => array(
        'contentPath' => base_path() . _h5p_get_h5p_path() . '/content/',
        'exportEnabled' => (bool) variable_get('h5p_export', 1),
        'h5pIconInActionBar' => variable_get('h5p_icon_in_action_bar', '1') == 1,
        'libraryPath' => _h5p_get_h5p_path() . '/libraries/',
        'postUserStatistics' => $user->uid > 0,
        'ajaxPath' => url('h5p-ajax') . '/',
        'userName' => $user->name,
        'userMail' => $user->mail,
      )
    ), 'setting');
  }

  return $assets;
}

/**
 * Adds h5p files and settings.
 *
 * @param stdClass $node
 */
function h5p_add_files_and_settings($node, $embed_type) {
  static $added_content, $added_js, $added_css;

  h5p_add_core_assets();

  if (!isset($node->json_content) || !isset($node->nid)) {
    return; // Not content.
  }

  $content_id = h5p_get_content_id($node);
  if (isset($added_content[$content_id])) {
    return; // Already added.
  }
  $added_content[$content_id] = TRUE;

  $content = array(
    'id' => $content_id,
    'title' => $node->title,
    'params' => $node->json_content,
    'language' => $node->language,
    'library' => $node->main_library,
    'embedType' => 'div',
    'filtered' => $node->filtered,
  );
  $core = _h5p_get_instance('core');

  $filtered = $core->filterParameters($content);
  
  /* 
   * Allow other modules to alter the filtered parameters,
   * but don't decode the parameters unless it is needed
   */
  $modules = module_implements('h5p_filtered_params_alter');
  if (!empty($modules)) {
    $filtered = json_decode($filtered);
    foreach ($modules as $module) {
      $function = $module . '_h5p_filtered_params_alter';
      $function($filtered);
    }
    $filtered = json_encode($filtered);
  }
  
  $settings = array(
    'h5p' => array(
      'content' => array(
        "cid-$content_id" => array(
          'library' => $node->main_library['name'] . ' ' . $node->main_library['majorVersion'] . '.' . $node->main_library['minorVersion'],
          'jsonContent' => $filtered,
          'fullScreen' => $node->main_library['fullscreen'],
          'exportUrl' => h5p_get_export_path($content['id']),
          'embedCode' => _h5p_generate_embed_code($node->nid),
          'mainId' => $node->nid,
        )
      )
    )
  );

  $preloaded_dependencies = $core->loadContentDependencies($content_id, 'preloaded');
  $files = $core->getDependenciesFiles($preloaded_dependencies);

  if ($embed_type === 'div') {
    foreach ($files['scripts'] as $script) {
      $url = $script->path . $script->version;
      if (!isset($added_js[$url])) {
        drupal_add_js($script->path);
        $settings['h5p']['loadedJs'][] = $url;
        $added_js[$url] = TRUE;
      }
    }
    foreach ($files['styles'] as $style) {
      $url = $style->path . $style->version;
      if (!isset($added_css[$url])) {
        drupal_add_css($style->path);
        $settings['h5p']['loadedCss'][] = $url;
        $added_css[$url] = TRUE;
      }
    }
  }
  elseif ($embed_type === 'iframe') {
    h5p_add_iframe_assets($settings, $content_id, $files);
  }

  drupal_add_js($settings, 'setting');
}


/**
 * Add the necessary assets for content to run in an iframe.
 *
 * @param array $settings
 * @param int $content_id
 * @param array $files
 * @param string $cache_file_prefix
 */
function h5p_add_iframe_assets(&$settings, $content_id, $files) {
  static $core_added;

  if ($core_added === NULL) {
    $core_added = TRUE;
    $core_assets = h5p_add_core_assets();

    $settings['h5p']['core']['scripts'] = $core_assets['js'];
    $settings['h5p']['core']['styles'] = $core_assets['css'];
  }

  $preprocess_css = (variable_get('preprocess_css', FALSE) && (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update'));
  $preprocess_js = (variable_get('preprocess_js', FALSE) && (!defined('MAINTENANCE_MODE') || MAINTENANCE_MODE != 'update'));
  $directory = file_stream_wrapper_get_instance_by_uri('public://')->realpath();
  $is_writable = is_dir($directory) && is_writable($directory);
  // TODO: && (variable_get('file_downloads', FILE_DOWNLOADS_PUBLIC) == FILE_DOWNLOADS_PUBLIC); ?

  // Aggregate library styles and scripts for faster loading when using iframe.
  // Core files are not included to leverage browser caching! See http://css-tricks.com/one-two-three
  $core = _h5p_get_instance('core');

  if ($is_writable && $preprocess_css) {
    // Refactor styles array to Drupal eatable format.
    $styles = array();
    foreach ($files['styles'] as $style) {
      $styles[] = array(
        'data' => $style->path,
        'type' => 'file'
      );
    }

    $css_url = file_create_url(drupal_build_css_cache($styles));
    $settings['h5p']['cid-' . $content_id]['styles'] = array($css_url);
  }
  else {
    $settings['h5p']['cid-' . $content_id]['styles'] = $core->getAssetsUrls($files['styles']);
  }

  if ($is_writable && $preprocess_js) {
    // Refactor scripts array to Drupal eatable format.
    $scripts = array();
    foreach ($files['scripts'] as $script) {
      $scripts[$script->path] = array(
        'data' => $script->path,
        'type' => 'file',
        'preprocess' => TRUE,
      );
    }

    $js_url = file_create_url(drupal_build_js_cache($scripts));
    $settings['h5p']['cid-' . $content_id]['scripts'] = array($js_url);
  }
  else {
    $settings['h5p']['cid-' . $content_id]['scripts'] = $core->getAssetsUrls($files['scripts']);
  }
}

/**
 * Verify that the libraries H5P needs exists
 *
 * @return boolean
 *  TRUE if the settings validate, FALSE otherwise
 */
function _h5p_check_settings() {
  $file_path = file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath();
  $path = $file_path . '/' . variable_get('h5p_default_path', 'h5p');

  // Creating directories - the first empty string is for creating the parent H5P directory
  foreach (array('', 'temp', 'libraries', 'content', 'exports', 'development') as $directory) {
    $directory = $path . '/' . $directory;
    if (!file_prepare_directory($directory, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS)) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Deletes old session variables that aren't valid anymore
 *
 * We don't want to keep any session variables around if this
 * is a new form...
 */
function _h5p_maintain_session_variables() {
  if (!$_POST && !empty($_SESSION['h5p_upload'])) {
    unset($_SESSION['h5p_upload'], $_SESSION['h5p_upload_folder']);
  }
}

/**
 * Get an instance of one of the h5p library classes
 *
 * This function stores the h5p core in a static variable so that the variables there will
 * be kept between validating and saving the node for instance
 *
 * @staticvar H5PDrupal $interface
 *  The interface between the H5P library and drupal
 * @staticvar H5PCore $core
 *  Core functions and storage in the h5p library
 * @param string $type
 *  Specifies the instance to be returned; validator, storage, interface or core
 * @return object
 *  The instance og h5p specified by type
 */
function _h5p_get_instance($type) {
  static $interface, $core;
  global $language;

  if (!isset($interface)) {
    $interface = new H5PDrupal();

    $development_mode = H5PDevelopment::MODE_NONE;
//    if (variable_get('h5p_content_dev_mode', '0') === 1) {
//      $development_mode |= H5PDevelopment::MODE_CONTENT;
//      drupal_set_message(t('H5P content development mode is enabled. Change <a href="@settings-page">settings</a>.', array('@settings-page' => url('admin/config/system/h5p'))), 'warning', FALSE);
//    }
    if (variable_get('h5p_library_development', 0) === 1) {
      $development_mode |= H5PDevelopment::MODE_LIBRARY;
      $preprocess_css_or_js = variable_get('preprocess_css', 0) === '1' || variable_get('preprocess_js', 0) === '1';

      $message = t('H5P library development directory is enabled. Change <a href="@settings-page">settings</a>.', array('@settings-page' => url('admin/config/system/h5p')));

      if ($preprocess_css_or_js) {
        $message .= '<br/>' . t('Preprocessing of css and/or js files is enabled. This is not supported when using the development directory option. Please disable preprocessing, and clear the cache');
      }

      drupal_set_message($message, 'warning', FALSE);
    }

    $core = new H5PCore($interface, _h5p_get_h5p_path(), $language->language, (variable_get('h5p_export', '1') ? TRUE : FALSE), $development_mode);
  }

  switch ($type) {
    case 'validator':
      return new H5PValidator($interface, $core);
    case 'storage':
      return new H5PStorage($interface, $core);
    case 'contentvalidator':
      return new H5PContentValidator($interface, $core);
    case 'export':
      return new H5PExport($interface, $core);
    case 'interface':
      return $interface;
    case 'core':
      return $core;
  }
}

/**
 * Get the path to the h5p files folder.
 *
 * @return string
 *  Path to the h5p files folder
 */
function _h5p_get_h5p_path() {
  $file_path = file_stream_wrapper_get_instance_by_uri('public://')->getDirectoryPath();
  return $file_path . '/' . variable_get('h5p_default_path', 'h5p');
}

/**
 * The h5p module supports disabling revisioning of the h5p files and database entries.
 * This means that all revisions of a h5p node will belong to the newest files and
 * entries in the database. This is done to make it easier to sync h5p nodes between
 * servers(a client needs this), and it also saves disk space.
 *
 * A side effect of this is a very strange database schema, and some strange code here and
 * there.
 *
 * @param object $node
 *  The node we will extract the content id from
 * @return int
 *  The nodes vid if we're supporting revisioning. The nodes nid if we aren't
 */
function h5p_get_content_id($node) {
  if (!isset($node->vid) || !isset($node->nid)) {
    return NULL; // We might be translating
  }
  return variable_get('h5p_revisioning', 1) ? $node->vid : $node->nid;
}

/**
 * Implements hook_field_extra_fields().
 */
function h5p_field_extra_fields() {
  $extra['node']['h5p_content'] = array(
    'form' => array(
      'h5p' => array(
        'label' => t('H5P Upload'),
        'description' => t('Upload interactive content.'),
        'weight' => 2,
      )
    ),
    'display' => array(
      'h5p' => array(
        'label' => t('Interactive content'),
        'description' => t('Interactive content'),
        'weight' => 2,
      )
    )
  );

  return $extra;
}

/**
 * Implements hook_views_api().
 */
function h5p_views_api() {
  return array(
    'api' => 3,
    'path' => H5P_VIEWS_DIR,
  );
}

/**
 * Handler for the custom node points access check
 *
 * @param stdObject $account
 */
function h5p_access_node_points($account = NULL) {
  global $user;

  if (arg(0) === 'node' && is_numeric(arg(1))) {
    $node = node_load(arg(1));
    if ($node !== FALSE && $node->type == 'h5p_content') {
      if (user_access('access all h5p results')) {
        return TRUE;
      }

      // menu_get_object isn't working, so we load it manually...
      if (user_access('access h5p results for own content') && $user->uid === $node->uid) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Handler for the custom user points access check
 *
 * @param stdObject $account
 */
function h5p_access_user_points($account = NULL) {
  global $user;

  if (user_access('access all h5p results')) {
    return TRUE;
  }

  // menu_get_object isn't working, so we load it manually...
  if (arg(0) === 'user' && is_numeric(arg(1))) {
    $accessed_user = user_load(arg(1));
    if ($accessed_user !== FALSE) {
      if (user_access('access own h5p results') && $user->uid === $accessed_user->uid) {
        return TRUE;
      }
    }
  }
  return FALSE;
}
